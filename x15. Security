AWS Directory Service
----------------------
Directory services like Active Directory and Simple AD is database of user accounts, credentials and having details of who can do what i.e. authorizationa and authentication. For AWS, we can implement it on AWS in diff ways or we can connect an existing directory service in our premises/data center into AWS. 

1. AWS Managed Microsoft AD which is fully managed implementation of Microsoft Active Directory that runs on Windows servers in the AWS. So we create this AD in console and it creates highly available Windows Server domain controllers in the multiple subnets of our VPC.
We can connect a Microsoft AD over a Direct Connect or VPN connection. Now inside AD, we can connect it to multiple AWS services or even external services securely, which when done, user has to then authenticate with AD before using these services.  AD connects to these services securely using its domain controllers and services then become part of their Active Directory domain. We can connect services like Ec2, RDS, Workdocs, quicksight, FSx, etc and even external Azure Cloud, Azure AD or Office 365 by attaching extra ADSync and ADFS to our controllers.
Users can then use these services by authenticating to AD through single sign-on and can enable multifactor authentication using radious as well. It's the best choice if you have more than 5,000 users. We can also extend the this MS AD schema (other than normal standalone AD in AWS) by connecting it with another active directory domain. It also supports extension of MS AD by connecting to some AD on on-premises and thus users can then use any of both AD for authentication using Single Sign on (SSO) by VPN connection. 

2. Self Managed AD on-premises using AD Connector => If we have a AD on our on-premises data center which is unlike AWD AD, self managed by us and we want to use it with AWS services without using AWS AD. Thus we can do that by using AD connector. So when user authenticates on your AD using AD credentials, the request goes to AD connector in AWS which will map the user allowed things to AWS IAM roles which user will assume and login to AWS services he wants and he is allowed to Ex- AWS workspaces, workdocs, workmail and it can connect to windows EC2 servers also. It also allows to log into the management console using your on-premises AD credentials (after normal AWS login) for authentication for services you need because it will ultimately assume the role to provide access to services that are allowed for this user account.
It comes in two sizes; you've got small for up to 500 users and large for up to 5,000 users + also note that Ad connector must be connected to on-premises AD over VPN or direct connect. 

3. Simple AD => least expensive option, similar to Active Directory (i.e. Active directory is third party AD software), fully managed, and runs in AWS in standalone manner. directory service running in the AWS but works with fewer than 5,000 users and dont have advanced Active Directory features. It does include features like managing user accounts and groups, applying group policies, Kerberos-based single sign-on and supports both Linux and Windows-based EC2 instances.

Identity Federation 
--------------------
Identity Federation is about having trust relationships between multiple parties. Like discussed, we might have an on-premises Active Directory domain and we want to enable our identities in that domain to be authenticated and then authorized to access services on AWS which is done by assuming roles which mechanism is called Identity federation.
Ex- See slide 720 => We want to enable the app running on computer that's running inside on-premises data center to be authorized to access an S3 bucket => User running the application does not have AWS credentials but do have identity in an on-premises directory store => 
The client application will authenticate using the IDP Identity provider by giving AD credentials and IDP will use Lightweight Directory Access Protocol, LDAP to authenticate it and once done, Idp will be connected to STS on AWS side to which it will send 'client SAML assertion' which is SAML (security assertion markup language) based assertion to tell AWS that user is authenticated. This SAML assertion is sent by calling the AWS STS assume role API of STS service. STS will then return temporary security credentials and the application can then use those to get authorized access to the S3 bucket.
Another way of this identity federation is using IAM service instead of STS which is  Web identity federation => Before this, read SSO part and cognito part => This web identituy federation is done when we have a SAML based identity provider which can be AD as well as social logins to provide identity of the user and then we can connect to IAM based on that identity using OpenId Connect. AWS recommends to use Amazon Cognito for web identity federation which is in later section.

AWS Single Sign On (SSO)
------------------------
With AWS Single Sign-on we can authenticate once with our credentials and then get access to a variety of systemswithout re-authenticating again for different systems. We do this by implementing Single sign on and connecting that setup to various systems to which we want to authenticate the user to. 
See slide 723 => Think of avalara SSO where we have github, AWS and many other diff systems and we login using SSO and get access to all without logging in. Now these apps must have built-in SSO integrations, only then they can be attached to SSO. Within SSO, it will be connected to some identity source which will be used to do authentication for single sign on and mappings to login to these SSO integrated services. Identity sources can be ADs which we studied last => Anything that has to be identity source, it must be SAML 2.0 or any SAML 2.0 compatible identity source. Now if its AD, then it can be self-managed Microsoft Active Directory in an on-premises environment as shown and to use it, we have to use extra thing for connection which is AWS directory service as show. We can also use Azure AD or AWS MS AD directly as well. Now SSO once logged in to it, will use its implementation logic to provide auth to diff systems, even AWS diff accounts and organizations. Note that with SSO we do need to do this implementation of our authorization logic for resources and different systems but SSO will give you the functionality to connect them together.


Amazon Cognito 
--------------
It is principally used for adding sign in and sign-up functionality to web and mobile applications. It basically acts as a broker between identity providers and AWS using STS to achieve it. 
See slide 727 => Let's say we have a client or mobile application and we have an API Gateway. Behind that API Gateway we have AWS services we want to connect to. To connect to them we need temporary credentials/roles => app for this must know the identity of the app user and thus they can get user identity by using a) Social identity providers like Gmail etc where user will autehnticate and we will get identity or b) using Cognito user pool where our user identities are stored. Once identity is authenticated, IDP returns back JWT token. The app then sends the JWT token to the Identity pool (remember though the name is identity pool, it does not stored identities but user pool does) => See slide 727 now => Identity pool then contacts STS to get limited priviledge temporary AWS credentials for assuming the role => Back to slide 728 => app then gets the temporary credentials to access AWS services. 

Encryption
----------
Encryption at rest vs in transit => transit is done using HTTPS SSL and TSL which encrypts data at source and using certificate decrypts at destinations and thus data once at destination i.e. rest, it will not be encyrpted and this is when encryption at rest is used like S3 encryption we saw earlier.
Asymmetric vs Symettric => Asymmetric encryption (or public key crypto) have public and private key => message encrypted with public key can be opened through private key and vice versa. Ex-  SSL TLS, SSH. In case of symmetric encryption, there is only one key which is used for both encryption and decryption.

AWS Key Management Service KMS : KMS is used for creation and management of encryption keys. KMS has customer master key or CMK which is the primary resource in KMS i.e. key used to encrypt and decrypt data. CMKs keys are created in KMS and can be symmetric and asymmetric.
Symmetric CMKs and the private keys of the asymmetric CMKs can never be downloaded or viewed i.e. never leaves AWS. CMKs can be created by providing external logic i.e. your own key material. A CMK can encrypt data up to four kilobytes in size. 

Data Encryption keys DEKs: They are used when data is larger than 4 kilobytes and hence CMK cant be used => DEKs are still generated, encrypted, and decrypted using CMKs only. One DEK can be used to encrypt other DEK also. KMS does not store, manage, or track these data keys and all this needs to be done outside of KMS in our application. 

CMKs can be customer managed where we manage the key or AWS managed which you cant manage at all like rotation, key policies etc. Managed keys are not used directly by you but they are used through AWS service like S3 can be told to use managed keys. We also have 3rd type rarely comes up in exam which is AWS owned CMKs which we cant see, don't manage them, and they're used across different accounts. See the diff bw these 3 in table in slide 736.

LAB: Go to AWS KMS -> See AWS managed keys on left => click customer managed keys => create key => symmetric => advance => We can ask KMS to choose key matrial or give external or HSM which we will study later => KMS, single region => name, next => Admin permission => tell who can admin the key => usage => tell who can use the key => Next => it will show key policy which is IAM policy mentioning admin, usage permission => finish and it will be created => we can go to rotation tab of key and choose to rotate it every year if we want => Now delete the key and it will ask waiting period because it is possible that it is deleted by mistake and if deleted, your encrypted data cant be recovered ever and hence the waiting period. We can also disabled the key. 

CloudHSM
---------
AWS CloudHSM is another service for creating and managing encryption keys and is diff from KMS because it has dedicated hardware device that you get for storing keys i.e. not a multi-tenant infrastructure like KMS and actually runs in your own VPC. It uses FIPS 140-2 level 3 validated hardware security modules i.e. extremely secure. This is usually required in place of KMS when some compliance need you to do that.
In this we have the control of encryption keys with full access and AWS itself does not have any visibility of the keys at all. It however is a managed service in a way it scales automatically. 
Use cases: offload SSL and TLS processing that happens extensively on web servers to this dedicated hardware, store private keys of your certificate authority if any or imp private keys in cloudhsm, storing master keys, use it as backup for KMS but here keys will be in your control.
Comparision with KMS: CloudHSM is single tenant, KMS is multi-tenant +  For availability, both are high availability but with CloudHSM, you get a bit more control + CloudHSM is customer managed, whereas its AWS managed for KMS + broad third party support with CloudHSM, but you don't get support for AWS services directly, in KMS you get broad support for AWS services also.

ACM Certificates
-----------------
ACM is a service for issuing certificates i.e. SSL/TLS certificates that we can then use for encryption in transit. We can have single domains or multiple domains and even wild cards on the certificates that you issue (i.e. *.avalara.com is trusted). It integrates with several AWS services like Elastic Load Balancing, CloudFronts, Elastic Beanstalk, and AWS Nitro Enclaves, AWS CloudFormation.
The public certificates are signed by the AWS Public Certificate Authority but we can also create our own private certificate authority within ACM and issue private certificates as well. We can also import certificates from third party issuers by importing key material of certificate. 

AWS WAF (Web Application Firewall)
-----------------------------------
WAF helps in creating rules called web ACLs to filter traffic based on conditions like the IP addresses, HTTP headers, the body, the custom URIs, geography, where clients are coming from, rate-based filters and much more. WAF is very good for protecting against web exploits like SQL injection and cross site scripting (IMP for exam) => Example - You've got your connections coming in from the world wide web and they can hit AWS WAF which can be in front of your CloudFront distribution to protect app running behind cloudfront. You can also put WAF in front of an ALB to protect EC2 resources behind an ALB. You can also use WAF in front of an API gateway as well.
Web ACLs Access Control List => we create rules and each rule defines a match statement on what to inspect in the request or its origin for conditions you provide and what action to take if a web request meets the criteria for inspection. This rule actions can do things like count the number of requests that are coming in over a specific period of time that match these criteria, it can forward the traffic to your application Or it can block and client will get 403 forbidden status.
The match statement also can have diff options like geographic match, Size constraints to check size constraints within the packets, SQLi attacks, string matches, and cross site scripting attacks, Regex Sets, IP Sets (provides a collection of IP addresses and IP ranges to put together in a rule statement to allow or block it) etc.
Rule groups => we can use rules individually or can put them into a group.

AWS Shield
-----------
AWS Shield is a service that you can use to protect against distributed denial of service attacks DDoS attacks i.e. somebody malicious is attempting to bring down your resources by sending large amounts of data. Attackers are creafy and can send diff malformed data to your application to try and bring it down, skip firewalls etc. Shield is managed AWS service and works on always-on detection and automatic in-line mitigations which means they reduce downtime and latency while protecting against DDOS because checking every request can also add latency for users which we dont want. 
There are two tiers => Standard at no cost and has basic features like network flow monitoring and standardized protection for underlying AWS services + it is already integrated into cloudfront by default and Advanced which $3,000 dollars a month and you have a one year commitment but it is worth for some companies because of advanced features like 24/7 support from the DDoS response team, layer seven traffic monitoring, etc. 

Defense in Depth
----------------
Watch this video as Architecture pattern type. 
