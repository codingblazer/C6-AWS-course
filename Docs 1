Identity and Access Management => to access your AWS accounts securely  

IAM policy => can be attached to a user or group or role => tells a list of permissions or things user/group/role is allowed to do on AWS. Example => S3FullAccess policy inside which we have granted some things to s3 and denied some to s3. These documents for policy are written in JSON. All permissions are denied by default i.e. if not granted, then denied automatically. The most restrictive policy is always applied.
IAM policy simulator tool can be used to simulate policy changes and see their effects to validate access control policies.

When we create a AWS account we get a root user credentials which is email and password called root user credentials. Root user has full admin permissions and these cannot be restricted by anything. Root users can add users, create groups, policies etc. Any AWS root account can have upto 5000 users.

1) IAM User => User is a person or service =>  
User can be assigned => 1) Access key ID and secret access key for programatically accessing AWS API, CLI, SDK and other development tools of AWS or a 2) Password to access the management console which is AWS web app i.e. non programatically. Each user has a friendly name like Sachin and ARN (Amazon Resource Name) which uniquely identifies the user across AWS. 
By default, user can access nothing in AWS until root user assigns some IAM policy giving permissions to this user.

IAM user accounts used by service/application are called service accounts.

Best Practices for user related things => 
1) Dont use root user credentials => create a IAM user, assign it admin permissions policy for things you want and use that. 
2) Dont share or put root user credentials anywhere in the code.
3) Enabled multifactor authentication.
4) Create separate user IAM accounts for different users i.e. don't make multiple users share the same account.
5) Password policy can be defined to enforce password length/complexity for all users.
6) Use groups to assign permissions to user i.e. add user to some group which has permissions needed by your user or create new group with new policy if not present. 
7) Use principle of least priviledge when assigning permissions. 


2) IAM Group => collection of users => we can apply the IAM policy to a group as well => Example is different departments in your company has different permissions on what they can do on AWS, for example Developers, AWS Admins group, Operations group. Note that user or group can have multiple IAM policies.
Group is not an identity and thus cannot be identified/mentioned while creating a IAM policy. You can create IAM policy without mentioning group in it and then attach this policy to the group. 
Note that groups cant be nested i.e. there cant be groups within groups.

3) IAM Role => Roles are assumed by the trusted entities and can be used for delegation. Roles are like a hat that any service (let say EC2 instance) or IAM user within your AWS account or IAM user in some other AWS account can wear and thus gain permissions defined in that role to access AWS resources like S3 full access => So usually we create roles like s3FullAccess, AWSLambdaExecutionRole and assign them to any service we have up running so they can access s3 write without using permanent credentials like username and password. This is generally done for services i.e. let say Ec2 wants to access s3 and now you have to give credentials somewhere in your service to access s3 but instead it can be assigned role since it is within AWS only without need of mentioning security credentials in your code. 
-----------------------------------------------------------------------------------------------------------------------------
Authentication Methods => 

1) Access Key => for programmatic access => KV pair => Access key id and secret => You will need it when using CLI or AWS API or SDK. You can add MFA protection to API operations your service is making. These access keys can be created, modified, viewed or rotated. => When you create them, IAM returns the access key. If the secret part for the key is lost, you have to create a new key again. You can just view the key id part. User can be given access to change their own keys through IAM policy (not from the console). 

2) Password => IAM user => on AWS Management console i.e. UI => Can add MFA here too => IAM users if they want to change password => allowing your IAM users to do so can be controlled by attaching the policy for this to this IAM user.

3) IAM Server Certificate or Signing Certificate => SSL/TLS Certificate can be used to authenticate with any AWS service => these certificates are recommended to be managed on AWS Certificate Manager (ACM) service. Use IAM only when you mut support HTTPS connection in region that is not supported by the ACM.

Best practices for Access keys => 
1) Ensure access keys and secrets are stored securely.
2) If some service is compromised => you should first destroy the access keys associated with that service and recreate them maybe.
3)
----------------------------------------------------------------------------
AWS Security Token Service (STS)

Let say User Sachin is in Account A of AWS and Ankush is in Account B of AWS. Now, Sachin wants to access s3 in account B and thus one way to go about this is, sachin will assume the role (which will be inside account B), the role which will have permission to access S3 => Now how this role thing works in the backend is => using the STS => Sachin assumes role R in Account B => Role connects to STS service inside the account B to provide a temporary, limited priviledge credentials for IAM User Sachin (called federated users) or for user in Account B itself. STS provides back these credentials to user Sachin and Sachin access S3 directly using these temporary credentials. 

STS is AWS region wise service => if STS is not enabled in particular region and credentials are requested in that region by the user Sachin, it will be denied. All regions are enabled by default. Once credentials are given, these credentials will work in all regions/globally even if region of user is denied.  AWS STS is single endpoint where all global/any region request comes to => https://sts.amazaonaws.com/ 
--------------------------------------------------------------------------------
ACCOUNT SETUP

Best Practices => 
1) Dont use root account ever unless billing information changes. Use IAM user account for everything. 

Modify Sign in Link 
=> Go to services and IAM service => It will show IAM users sign in link which you can use to login => But you can modify this by Customize option. =>
https://codingblazer.signin.aws.amazon.com/console

Setup Billing Alarm => Only root user account has access to modify billing information. Go to top right Account name => My billing Dashboard => Billing preferences from left pane => Check the option => Receive Free Tier Usage Alerts and Recieve Billling ALerts => Click the link o Manage Billing Alerts which will open cloudwatch service => Left pane under alarm, select Billing => Create Alarm => Check metric name is Estimated charge and set the threshold limit as 10$ at the end and Next to step2 => Setup topic under SNS =-> SNS is notification service which sends notifications to configured emails => Create the topic for the alarm, choose Create new topic option => give name "Billing xyz" => Basically this is reusable topic that can be used with SNS to send notification for same emails for similar alarms. Next and give alarm name, review and create alarm.
It will show message that SNS does not send notification until subscription is done => emails that you have configured with SNS will get email asking their confirmation that they want to receive these emails. Once confirmed it will show as confirmd in the SNS console.

Setup MFA for root account => Though you can give IAM user full admin access but still it will not get some things which are under root only like billing. => Go to IAM console from AWS services => Click link for Enable MFA => Will open Security Credentials screen => Click Activate MFA button => Authentication is usually based on 1) What you know (password) 2) What you have (device => MFA) 3) What you are (Biometric). 2 factor authentication means using 2 of these => we are using password and device => Virtual MFA device option => QR code => Google authenticator on your phone => On app, do + and add QR code and its added. Enter top 2 codes and MFA is done. You can now see manage button there which can be used resynch or remove. Signout and check it.

Create IAM User => IAM console => Users on left => New User => Name, Access type select both, Custom Password give, Require reset uncheck and Next => Add User to group => User should be added to some group => Since no group so far, create group => since this user will be admin user as proxy for root user => name group as AWS-Admins => Apply the Administrator policy which will give full access to users in this group => You can expand Administrative Access policy and select JSON to see what this policy allows => Allow, action like read/write on resource like S3. => Create group => Select group if not so that user is added to this => skip tags, review and create. => copy the secret and key id for access key => once seen, you can never see the secret again so copy somewhere safe => Can check the created user and group in the respective user and group tab. Sign out and sign in to before account => account alias as codingblazer => and give credentials for new user account => SachinA and password.

Setup Password Policy for IAM users => IAM console => Account Settings => Password policy => Change password policy => Expiration, restrictions, etc. => this policy does not apply for the root user account password => Enabled MFA on not just root but also for all IAM users too => 

-----------------------------------------------------------------------------------------------
AWS Global Infra 

1. Region => Geo area with 2 or more AZs, isolated from other regions. => 25 regions currently
2. AZ => One or more data centers that are physically separate and isloated from other AZs. They are connected with low latency highly available high bandwidth links => you can deploy your resources within a region but into separate AZ for high availability and redundancy => if outage in one AZ, you can still acccess other AZ which in turn is linked to outaged AZ as well. 

3. Edge location and Regional Edge Cache => These are both part of cloudfront cloud network which is responsible for caching the content. These are cached all around the world and users can talk to cached content closer to them becuase less network distance will reduce latency for accessing cached datas. 
Edge location => around 176 locations in world => cached content
Regional Edge Cache => These are larger caches and sits between AWS services and edge locations => so any sharing of data between AWS services or edge locations is cached here.

4. Global network => highly available, low latency private global network connecting data centers, AZ and AWS regions. 

Region us east 1-----global private network---------Region eu west 1 
							|
							|	
				Region apsoutheast2

If you live in australia and most of your users are in america, it makes sense to deploy your service and resources in america region since those will be closest to your customers,

------------------------------------------------------	|					------------edge location---users	
region 													|					|
	Cloudfront Origins									|---------Regional edge cache-----edge location---users
			EC2 server running							|--------Regional edge cache-----edge location----users	
			S3 inside this region storing media files	|					|
--------------------------------------------------------					-------------edge location---users	


----------------------------------------------------------------------------------------------------------------------------------
Virtual Private Cloud => You can create your private network/cloud inside AWS. Now Avalara cloud for example that you will create will need to be under one single region i.e. this avalara cloud cant have network with some machine from one region and some from other. Now that your VPC or avalara network will be inside one region, the avalara cloud will have different AZ. Why designed like this ? Because we just discussed in last section that you deploy redundant machines across different AZ in case outage happens in one AZ => there must be different AZ present for you to deploy in your private avalara account. Thus in AWS, VPC is designed like -

Region => VPC => AZs

Note that one region can have upto 5 VPCs. for your AWS account. 

Now inside each AZ of your VPC, you can have subnets which is basically a range of IPs => subnet might be public or private. Now all the resources like Ec2 that you start runs inside a subnet which is inside AZ which is inside VPC and which is inside Region => Region VPC AZ Subnet Resource => If you havent created any VPC, and start a Ec2 instance in your account, it will use the default configured VPC and default configured subnet for running your Ec2 instance which you might not even observe. AWS actually has configured a default VPC for every region in your account in case you dont create one and this be used as default one. You can modify this or create new VPC. 

Each VPC has one routing table, one internet gateway and (2 or more) AZ and each AZ having 1 subnet by default 



Doubts so far => 
1) Difference between policies and roles => 
2) The most restrictive policy is always applied. => example ?
3) Do practical for above things like creating a access key, secret keys and CLI, using from inside the API calls, MFA setup etc.
4) User can be given access to change their own keys through IAM policy (not from the console) => meaning => practical
5)IAM Server Certificate or Signing Certificate => SSL/TLS Certificate can be used to authenticate with any AWS service => these certificates are recommended to be managed on AWS Certificate Manager (ACM) service. Use IAM only when you mut support HTTPS connection in region that is not supported by the ACM. => practical of this and how ACM works and last line meaning and practical for that also.
6) 2nd para of STS => practical and what does region means exactly here ?


My notes to verify => 
1) Group is not an identity and thus cannot be identified/mentioned while creating a IAM policy. You can create IAM policy without mentioning group in it and then attach this policy to the group. 
2) Verify the whole part regarding roles 
3) 